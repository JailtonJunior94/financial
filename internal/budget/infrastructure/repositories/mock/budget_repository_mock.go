// Code generated by mockery v2.46.0. DO NOT EDIT.

package repositoryMock

import (
	context "context"

	entities "github.com/jailtonjunior94/financial/internal/budget/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// BudgetRepository is an autogenerated mock type for the BudgetRepository type
type BudgetRepository struct {
	mock.Mock
}

// Insert provides a mock function with given fields: ctx, budget
func (_m *BudgetRepository) Insert(ctx context.Context, budget *entities.Budget) error {
	ret := _m.Called(ctx, budget)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Budget) error); ok {
		r0 = rf(ctx, budget)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertItems provides a mock function with given fields: ctx, items
func (_m *BudgetRepository) InsertItems(ctx context.Context, items []*entities.BudgetItem) error {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for InsertItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*entities.BudgetItem) error); ok {
		r0 = rf(ctx, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBudgetRepository creates a new instance of BudgetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBudgetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BudgetRepository {
	mock := &BudgetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
