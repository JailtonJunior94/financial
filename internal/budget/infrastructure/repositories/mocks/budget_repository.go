// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repositoryMock

import (
	"context"

	"github.com/jailtonjunior94/financial/internal/budget/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewBudgetRepository creates a new instance of BudgetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBudgetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BudgetRepository {
	mock := &BudgetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// BudgetRepository is an autogenerated mock type for the BudgetRepository type
type BudgetRepository struct {
	mock.Mock
}

type BudgetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *BudgetRepository) EXPECT() *BudgetRepository_Expecter {
	return &BudgetRepository_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function for the type BudgetRepository
func (_mock *BudgetRepository) Insert(ctx context.Context, budget *entities.Budget) error {
	ret := _mock.Called(ctx, budget)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Budget) error); ok {
		r0 = returnFunc(ctx, budget)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BudgetRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type BudgetRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - budget *entities.Budget
func (_e *BudgetRepository_Expecter) Insert(ctx interface{}, budget interface{}) *BudgetRepository_Insert_Call {
	return &BudgetRepository_Insert_Call{Call: _e.mock.On("Insert", ctx, budget)}
}

func (_c *BudgetRepository_Insert_Call) Run(run func(ctx context.Context, budget *entities.Budget)) *BudgetRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entities.Budget
		if args[1] != nil {
			arg1 = args[1].(*entities.Budget)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BudgetRepository_Insert_Call) Return(err error) *BudgetRepository_Insert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BudgetRepository_Insert_Call) RunAndReturn(run func(ctx context.Context, budget *entities.Budget) error) *BudgetRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// InsertItems provides a mock function for the type BudgetRepository
func (_mock *BudgetRepository) InsertItems(ctx context.Context, items []*entities.BudgetItem) error {
	ret := _mock.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for InsertItems")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*entities.BudgetItem) error); ok {
		r0 = returnFunc(ctx, items)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// BudgetRepository_InsertItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertItems'
type BudgetRepository_InsertItems_Call struct {
	*mock.Call
}

// InsertItems is a helper method to define mock.On call
//   - ctx context.Context
//   - items []*entities.BudgetItem
func (_e *BudgetRepository_Expecter) InsertItems(ctx interface{}, items interface{}) *BudgetRepository_InsertItems_Call {
	return &BudgetRepository_InsertItems_Call{Call: _e.mock.On("InsertItems", ctx, items)}
}

func (_c *BudgetRepository_InsertItems_Call) Run(run func(ctx context.Context, items []*entities.BudgetItem)) *BudgetRepository_InsertItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*entities.BudgetItem
		if args[1] != nil {
			arg1 = args[1].([]*entities.BudgetItem)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BudgetRepository_InsertItems_Call) Return(err error) *BudgetRepository_InsertItems_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *BudgetRepository_InsertItems_Call) RunAndReturn(run func(ctx context.Context, items []*entities.BudgetItem) error) *BudgetRepository_InsertItems_Call {
	_c.Call.Return(run)
	return _c
}
