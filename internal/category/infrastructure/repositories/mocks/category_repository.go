// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repositoryMock

import (
	"context"

	"github.com/JailtonJunior94/devkit-go/pkg/vos"
	"github.com/jailtonjunior94/financial/internal/category/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewCategoryRepository creates a new instance of CategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryRepository {
	mock := &CategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CategoryRepository is an autogenerated mock type for the CategoryRepository type
type CategoryRepository struct {
	mock.Mock
}

type CategoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CategoryRepository) EXPECT() *CategoryRepository_Expecter {
	return &CategoryRepository_Expecter{mock: &_m.Mock}
}

// Find provides a mock function for the type CategoryRepository
func (_mock *CategoryRepository) Find(ctx context.Context, userID vos.UUID) ([]*entities.Category, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []*entities.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, vos.UUID) ([]*entities.Category, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, vos.UUID) []*entities.Category); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, vos.UUID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CategoryRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type CategoryRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - userID vos.UUID
func (_e *CategoryRepository_Expecter) Find(ctx interface{}, userID interface{}) *CategoryRepository_Find_Call {
	return &CategoryRepository_Find_Call{Call: _e.mock.On("Find", ctx, userID)}
}

func (_c *CategoryRepository_Find_Call) Run(run func(ctx context.Context, userID vos.UUID)) *CategoryRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 vos.UUID
		if args[1] != nil {
			arg1 = args[1].(vos.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CategoryRepository_Find_Call) Return(categorys []*entities.Category, err error) *CategoryRepository_Find_Call {
	_c.Call.Return(categorys, err)
	return _c
}

func (_c *CategoryRepository_Find_Call) RunAndReturn(run func(ctx context.Context, userID vos.UUID) ([]*entities.Category, error)) *CategoryRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type CategoryRepository
func (_mock *CategoryRepository) FindByID(ctx context.Context, userID vos.UUID, id vos.UUID) (*entities.Category, error) {
	ret := _mock.Called(ctx, userID, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entities.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, vos.UUID, vos.UUID) (*entities.Category, error)); ok {
		return returnFunc(ctx, userID, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, vos.UUID, vos.UUID) *entities.Category); ok {
		r0 = returnFunc(ctx, userID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, vos.UUID, vos.UUID) error); ok {
		r1 = returnFunc(ctx, userID, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CategoryRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type CategoryRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID vos.UUID
//   - id vos.UUID
func (_e *CategoryRepository_Expecter) FindByID(ctx interface{}, userID interface{}, id interface{}) *CategoryRepository_FindByID_Call {
	return &CategoryRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, userID, id)}
}

func (_c *CategoryRepository_FindByID_Call) Run(run func(ctx context.Context, userID vos.UUID, id vos.UUID)) *CategoryRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 vos.UUID
		if args[1] != nil {
			arg1 = args[1].(vos.UUID)
		}
		var arg2 vos.UUID
		if args[2] != nil {
			arg2 = args[2].(vos.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *CategoryRepository_FindByID_Call) Return(category *entities.Category, err error) *CategoryRepository_FindByID_Call {
	_c.Call.Return(category, err)
	return _c
}

func (_c *CategoryRepository_FindByID_Call) RunAndReturn(run func(ctx context.Context, userID vos.UUID, id vos.UUID) (*entities.Category, error)) *CategoryRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type CategoryRepository
func (_mock *CategoryRepository) Insert(ctx context.Context, category *entities.Category) (*entities.Category, error) {
	ret := _mock.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *entities.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Category) (*entities.Category, error)); ok {
		return returnFunc(ctx, category)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Category) *entities.Category); ok {
		r0 = returnFunc(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities.Category) error); ok {
		r1 = returnFunc(ctx, category)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CategoryRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type CategoryRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - category *entities.Category
func (_e *CategoryRepository_Expecter) Insert(ctx interface{}, category interface{}) *CategoryRepository_Insert_Call {
	return &CategoryRepository_Insert_Call{Call: _e.mock.On("Insert", ctx, category)}
}

func (_c *CategoryRepository_Insert_Call) Run(run func(ctx context.Context, category *entities.Category)) *CategoryRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entities.Category
		if args[1] != nil {
			arg1 = args[1].(*entities.Category)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CategoryRepository_Insert_Call) Return(category1 *entities.Category, err error) *CategoryRepository_Insert_Call {
	_c.Call.Return(category1, err)
	return _c
}

func (_c *CategoryRepository_Insert_Call) RunAndReturn(run func(ctx context.Context, category *entities.Category) (*entities.Category, error)) *CategoryRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type CategoryRepository
func (_mock *CategoryRepository) Update(ctx context.Context, category *entities.Category) (*entities.Category, error) {
	ret := _mock.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entities.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Category) (*entities.Category, error)); ok {
		return returnFunc(ctx, category)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Category) *entities.Category); ok {
		r0 = returnFunc(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities.Category) error); ok {
		r1 = returnFunc(ctx, category)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CategoryRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CategoryRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - category *entities.Category
func (_e *CategoryRepository_Expecter) Update(ctx interface{}, category interface{}) *CategoryRepository_Update_Call {
	return &CategoryRepository_Update_Call{Call: _e.mock.On("Update", ctx, category)}
}

func (_c *CategoryRepository_Update_Call) Run(run func(ctx context.Context, category *entities.Category)) *CategoryRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entities.Category
		if args[1] != nil {
			arg1 = args[1].(*entities.Category)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CategoryRepository_Update_Call) Return(category1 *entities.Category, err error) *CategoryRepository_Update_Call {
	_c.Call.Return(category1, err)
	return _c
}

func (_c *CategoryRepository_Update_Call) RunAndReturn(run func(ctx context.Context, category *entities.Category) (*entities.Category, error)) *CategoryRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
