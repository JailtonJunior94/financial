// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repositoryMock

import (
	"context"

	"github.com/jailtonjunior94/financial/internal/user/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// FindByEmail provides a mock function for the type UserRepository
func (_mock *UserRepository) FindByEmail(ctx context.Context, email string) (*entities.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *entities.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*entities.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *entities.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type UserRepository_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepository_Expecter) FindByEmail(ctx interface{}, email interface{}) *UserRepository_FindByEmail_Call {
	return &UserRepository_FindByEmail_Call{Call: _e.mock.On("FindByEmail", ctx, email)}
}

func (_c *UserRepository_FindByEmail_Call) Run(run func(ctx context.Context, email string)) *UserRepository_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_FindByEmail_Call) Return(user *entities.User, err error) *UserRepository_FindByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *UserRepository_FindByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*entities.User, error)) *UserRepository_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type UserRepository
func (_mock *UserRepository) Insert(ctx context.Context, user *entities.User) (*entities.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *entities.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.User) (*entities.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.User) *entities.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type UserRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entities.User
func (_e *UserRepository_Expecter) Insert(ctx interface{}, user interface{}) *UserRepository_Insert_Call {
	return &UserRepository_Insert_Call{Call: _e.mock.On("Insert", ctx, user)}
}

func (_c *UserRepository_Insert_Call) Run(run func(ctx context.Context, user *entities.User)) *UserRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entities.User
		if args[1] != nil {
			arg1 = args[1].(*entities.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_Insert_Call) Return(user1 *entities.User, err error) *UserRepository_Insert_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserRepository_Insert_Call) RunAndReturn(run func(ctx context.Context, user *entities.User) (*entities.User, error)) *UserRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}
