// Code generated by mockery v2.40.1. DO NOT EDIT.

package repositoryMock

import (
	entity "github.com/jailtonjunior94/financial/internal/domain/category/entity"

	mock "github.com/stretchr/testify/mock"
)

// CategoryRepository is an autogenerated mock type for the CategoryRepository type
type CategoryRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: c
func (_m *CategoryRepository) Create(c *entity.Category) (*entity.Category, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Category) (*entity.Category, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*entity.Category) *entity.Category); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Category) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields:
func (_m *CategoryRepository) Find() ([]*entity.Category, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []*entity.Category
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entity.Category, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entity.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Category)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *CategoryRepository) FindByID(id string) (*entity.Category, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entity.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Category, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Category); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c
func (_m *CategoryRepository) Update(c *entity.Category) (*entity.Category, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Category) (*entity.Category, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*entity.Category) *entity.Category); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Category) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCategoryRepository creates a new instance of CategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryRepository {
	mock := &CategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
